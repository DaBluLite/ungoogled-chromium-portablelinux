--- ./third_party/lss/linux_syscall_support.h
+++ ./third_party/lss/linux_syscall_support.h
@@ -139,11 +139,13 @@
  */
 #pragma push_macro("stat64")
 #pragma push_macro("fstat64")
+#pragma push_macro("fstatat64")
 #pragma push_macro("lstat64")
 #pragma push_macro("pread64")
 #pragma push_macro("pwrite64")
 #undef stat64
 #undef fstat64
+#undef fstatat64
 #undef lstat64
 #undef pread64
 #undef pwrite64
@@ -1244,6 +1246,12 @@
 #ifndef __NR_fallocate
 #define __NR_fallocate          285
 #endif
+
+#undef __NR_pread
+#define __NR_pread __NR_pread64
+#undef __NR_pwrite
+#define __NR_pwrite __NR_pwrite64
+
 /* End of x86-64 definitions                                                 */
 #elif defined(__mips__)
 #if _MIPS_SIM == _MIPS_SIM_ABI32
@@ -4520,6 +4528,7 @@
  * corresponding #pragma push_macro near the top of this file. */
 #pragma pop_macro("stat64")
 #pragma pop_macro("fstat64")
+#pragma pop_macro("fstatat64")
 #pragma pop_macro("lstat64")
 #pragma pop_macro("pread64")
 #pragma pop_macro("pwrite64")
--- ./sandbox/linux/suid/process_util.h
+++ ./sandbox/linux/suid/process_util.h
@@ -12,6 +12,14 @@
 #include <stdint.h>
 #include <sys/types.h>
 
+// Some additional functions
+# define TEMP_FAILURE_RETRY(expression) \
+	(__extension__			\
+	 ({ long int __result;		\
+	  do __result = (long int) (expression); \
+	  while (__result == -1L && errno == EINTR); \
+	  __result; }))
+
 // This adjusts /proc/process/oom_score_adj so the Linux OOM killer
 // will prefer certain process types over others. The range for the
 // adjustment is [-1000, 1000], with [0, 1000] being user accessible.
--- ./sandbox/linux/seccomp-bpf/trap.cc	2020-04-12 08:26:40.184159217 -0400
+++ ./sandbox/linux/seccomp-bpf/trap.cc	2020-04-12 08:46:16.737191222 -0400
@@ -174,7 +174,7 @@
   // If the version of glibc doesn't include this information in
   // siginfo_t (older than 2.17), we need to explicitly copy it
   // into an arch_sigsys structure.
-  memcpy(&sigsys, &info->_sifields, sizeof(sigsys));
+  memcpy(&sigsys, &info->__sifields, sizeof(sigsys));
 #endif
 
 #if defined(__mips__)
--- ./third_party/ffmpeg/libavutil/cpu.c
+++ ./third_party/ffmpeg/libavutil/cpu.c
@@ -41,7 +41,6 @@
 #include <sys/param.h>
 #endif
 #include <sys/types.h>
-#include <sys/sysctl.h>
 #endif
 #if HAVE_UNISTD_H
 #include <unistd.h>
diff --git a/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc b/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
--- ./chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
+++ ./chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
@@ -49,7 +49,9 @@
 #endif  // defined(OS_ANDROID) && defined(__arm__)
 
 #if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(__GLIBC__)
 #include <gnu/libc-version.h>
+#endif
 
 #include "base/linux_util.h"
 #include "base/strings/string_split.h"
@@ -291,7 +293,7 @@ void RecordLinuxDistro() {
 #endif  // defined(OS_LINUX) && !defined(OS_CHROMEOS)
 
 void RecordLinuxGlibcVersion() {
-#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+#if defined(__GLIBC__) && !defined(OS_CHROMEOS)
   base::Version version(gnu_get_libc_version());
 
   UMALinuxGlibcVersion glibc_version_result = UMA_LINUX_GLIBC_NOT_PARSEABLE;
--- ./base/logging.cc
+++ ./base/logging.cc
@@ -601,8 +601,7 @@
 
 LogMessage::~LogMessage() {
   size_t stack_start = stream_.tellp();
-#if !defined(OFFICIAL_BUILD) && !defined(OS_NACL) && !defined(__UCLIBC__) && \
-    !defined(OS_AIX)
+#if !defined(OFFICIAL_BUILD) && !defined(OS_NACL) && defined(__GLIBC__)
   if (severity_ == LOG_FATAL && !base::debug::BeingDebugged()) {
     // Include a stack trace on a fatal, unless a debugger is attached.
     base::debug::StackTrace stack_trace;
--- ./third_party/blink/renderer/platform/wtf/stack_util.cc
+++ ./third_party/blink/renderer/platform/wtf/stack_util.cc
@@ -97,7 +97,7 @@
 }
 
 void* GetStackStart() {
-#if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
     defined(OS_FUCHSIA)
   pthread_attr_t attr;
   int error;
--- ./net/dns/dns_config_service_posix.cc
+++ ./net/dns/dns_config_service_posix.cc
@@ -152,6 +152,6 @@
   ConfigParsePosixResult result;
 // TODO(fuchsia): Use res_ninit() when it's implemented on Fuchsia.
-#if defined(OS_OPENBSD) || defined(OS_FUCHSIA)
+#if defined(OS_OPENBSD) || defined(OS_FUCHSIA) || defined(_GNU_SOURCE)
   // Note: res_ninit in glibc always returns 0 and sets RES_INIT.
   // res_init behaves the same way.
   memset(&_res, 0, sizeof(_res));
--- ./third_party/swiftshader/third_party/llvm-subzero/lib/Support/Unix/Signals.inc	2019-06-18 11:51:17.000000000 -0400
+++ ./third_party/swiftshader/third_party/llvm-subzero/lib/Support/Unix/Signals.inc	2019-07-03 12:32:50.938758186 -0400
@@ -25,7 +25,7 @@
 #include "llvm/Support/raw_ostream.h"
 #include <algorithm>
 #include <string>
-#if HAVE_EXECINFO_H
+#if HAVE_EXECINFO_H && defined(__GLIBC__)
 # include <execinfo.h>         // For backtrace().
 #endif
 #if HAVE_SIGNAL_H
@@ -52,6 +52,7 @@
 #include <unwind.h>
 #else
 #undef HAVE__UNWIND_BACKTRACE
+#undef HAVE_BACKTRACE
 #endif
 #endif
 
--- ./third_party/nasm/nasmlib/realpath.c	2019-07-03 12:23:05.021949895 -0400
+++ ./third_party/nasm/nasmlib/realpath.c	2019-07-03 12:24:24.246862665 -0400
@@ -49,7 +49,7 @@
 
 #include "nasmlib.h"
 
-#ifdef HAVE_CANONICALIZE_FILE_NAME
+#if defined(__GLIBC__)
 
 /*
  * GNU-specific, but avoids the realpath(..., NULL)
diff --git a/mojo/public/cpp/platform/named_platform_channel_posix.cc ./mojo/public/cpp/platform/named_platform_channel_posix.cc
index 9082ac4..cbedae6 100644
--- ./mojo/public/cpp/platform/named_platform_channel_posix.cc
+++ ./mojo/public/cpp/platform/named_platform_channel_posix.cc
@@ -5,6 +5,7 @@
 #include "mojo/public/cpp/platform/named_platform_channel.h"
 
 #include <errno.h>
+#include <string.h>
 #include <sys/socket.h>
 #include <sys/un.h>
 #include <unistd.h>
